@model WebAppJobs4UK.Models.EmployeeListViewModel // Make sure this matches your actual namespace

@{
    // Calculate start index for the "#" column for the current page
    int startIndex = (Model.CurrentPage - 1) * Model.PageSize + 1;
    Func<int, string> getDepartmentName = deptValue =>
          {
              return deptValue switch
              {
                  1 => "IT",
                  2 => "HR",
                  3 => "Finance",
                  4 => "Marketing",
                  _ => "Unknown"
              };
          };
}

<table class="table table-bordered table-striped">
    <thead>
        <tr>
            <th>#</th>
            <th>
                <a href="javascript:void(0);" onclick="updateEmployeeList(@Model.CurrentPage, @Model.PageSize, '@Model.SearchTerm', 'name', '@(Model.SortBy == "name" && Model.SortOrder == "asc" ? "desc" : "asc")');">
                    Name
                    @if (Model.SortBy == "name")
                    {
                        <span class="glyphicon @(Model.SortOrder == "asc" ? "glyphicon-arrow-up" : "glyphicon-arrow-down")"></span>
                    }
                </a>
            </th>
            <th>
                <a href="javascript:void(0);" onclick="updateEmployeeList(@Model.CurrentPage, @Model.PageSize, '@Model.SearchTerm', 'email', '@(Model.SortBy == "email" && Model.SortOrder == "asc" ? "desc" : "asc")');">
                    Email
                    @if (Model.SortBy == "email")
                    {
                        <span class="glyphicon @(Model.SortOrder == "asc" ? "glyphicon-arrow-up" : "glyphicon-arrow-down")"></span>
                    }
                </a>
            </th>
            <th>
                <a href="javascript:void(0);" onclick="updateEmployeeList(@Model.CurrentPage, @Model.PageSize, '@Model.SearchTerm', 'department', '@(Model.SortBy == "department" && Model.SortOrder == "asc" ? "desc" : "asc")');">
                    Department
                    @if (Model.SortBy == "department")
                    {
                        <span class="glyphicon @(Model.SortOrder == "asc" ? "glyphicon-arrow-up" : "glyphicon-arrow-down")"></span>
                    }
                </a>
            </th>
            <th>
                <a href="javascript:void(0);" onclick="updateEmployeeList(@Model.CurrentPage, @Model.PageSize, '@Model.SearchTerm', 'hiredate', '@(Model.SortBy == "hiredate" && Model.SortOrder == "asc" ? "desc" : "asc")');">
                    Hire Date
                    @if (Model.SortBy == "hiredate")
                    {
                        <span class="glyphicon @(Model.SortOrder == "asc" ? "glyphicon-arrow-up" : "glyphicon-arrow-down")"></span>
                    }
                </a>
            </th>
            <th>
                <a href="javascript:void(0);" onclick="updateEmployeeList(@Model.CurrentPage, @Model.PageSize, '@Model.SearchTerm', 'salary', '@(Model.SortBy == "salary" && Model.SortOrder == "asc" ? "desc" : "asc")');">
                    Salary
                    @if (Model.SortBy == "salary")
                    {
                        <span class="glyphicon @(Model.SortOrder == "asc" ? "glyphicon-arrow-up" : "glyphicon-arrow-down")"></span>
                    }
                </a>
            </th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @if (Model.Employees != null && Model.Employees.Any())
        {
            @foreach (var emp in Model.Employees)
            {
                <tr>
                    <td>@(startIndex++)</td>
                    <td>@emp.Name</td>
                    <td>@emp.Email</td>
                    @* Call the helper method from the controller via ViewContext.Controller *@
                    <td>@getDepartmentName(emp.Department))</td>
                    <td>@emp.HireDate.ToShortDateString()</td>
                    <td>@emp.Salary.ToString("C")</td>
                    <td>
                        <a href="#" class="glyphicon glyphicon-edit" onclick="return BindrecordToEdit(@emp.Id)"></a>&nbsp;&nbsp;|&nbsp;&nbsp;
                        <a href="javascript:void(0);" class="glyphicon glyphicon-trash" onclick="Delete(@emp.Id)"></a>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="7" class="text-center">No employees found.</td>
            </tr>
        }
    </tbody>
</table>

<nav aria-label="Page navigation">
    <ul class="pagination">
        <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
            <a class="page-link" href="javascript:void(0);"
               onclick="updateEmployeeList(@(Model.CurrentPage - 1), @Model.PageSize, '@Model.SearchTerm', '@Model.SortBy', '@Model.SortOrder');">Previous</a>
        </li>

        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                <a class="page-link" href="javascript:void(0);"
                   onclick="updateEmployeeList(@i, @Model.PageSize, '@Model.SearchTerm', '@Model.SortBy', '@Model.SortOrder');">@i</a>
            </li>
        }

        <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
            <a class="page-link" href="javascript:void(0);"
               onclick="updateEmployeeList(@(Model.CurrentPage + 1), @Model.PageSize, '@Model.SearchTerm', '@Model.SortBy', '@Model.SortOrder');">Next</a>
        </li>
    </ul>
</nav>
<p>
    Showing @(Model.Employees != null ? Model.Employees.Count() : 0) of @Model.TotalItems employees.
    (Page @Model.CurrentPage of @Model.TotalPages)
</p>

 